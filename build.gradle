subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	sourceCompatibility = 1.7
	version = '1.0'

	repositories {
		mavenCentral()
		maven {
			url 'https://repository.jboss.org/nexus/content/groups/public-jboss/'
		}
	}
}

def dep_bcprov = 'org.bouncycastle:bcprov-jdk15on:1.48'
def dep_bcpkix = 'org.bouncycastle:bcpkix-jdk15on:1.48'

def dep_ejb3_api = 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'
def dep_cdi_api = 'javax.enterprise:cdi-api:1.0'
def dep_jaxrs_api = 'org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_1.1_spec:1.0.1.Final'
def dep_servlet_api = 'javax.servlet:javax.servlet-api:3.0.1'
def dep_picketbox = 'org.picketbox:picketbox:4.0.7.Final'

project(':authority.api') {
	dependencies {
	    compile dep_ejb3_api
	}
}

project(':authority.core') {
	dependencies {
		compile project(':authority.api')
		compile dep_bcprov
		compile dep_bcpkix
		compile dep_ejb3_api
		compile dep_cdi_api
	}

	def deployment_dep = [
		'deployment.bcprov:1.48.0',
		'deployment.bcpkix:1.48.0',
		'deployment.authority.api-1.0.jar export',
	]
	
	jar {
	    manifest {
	        attributes 'Dependencies': deployment_dep.join(',')
	    }
	}
}

project(':authority.adapter') {
	dependencies {
		compile project(':authority.api')
		compile dep_picketbox
	}

	def deployment_dep = [
		'org.picketbox'
	]
	
	jar {
	    manifest {
	        attributes 'Dependencies': deployment_dep.join(',')
	    }
	}
}

project(':authority.service') {
	apply plugin: 'war'
	apply plugin: 'eclipse-wtp'

	dependencies {
		providedCompile project(':authority.api')
		providedCompile dep_cdi_api
		providedCompile dep_jaxrs_api 
	}

	eclipse {
		wtp {
			facet {
				facet name: 'java', version: '1.7'
				facet name: 'jst.web', version: '3.0'
				facet name: 'jst.cdi', version: '1.0'
				facet name: 'jst.jaxrs', version: '1.1'
			}
		}
	}
}

project(':authority.tools') {
	task runAuthoritySetup(type: JavaExec, dependsOn:[classes]) {
		main = 'cavani.endorfina.authority.tools.AuthoritySetup'
		classpath = sourceSets.main.runtimeClasspath
	}
	
	task runCredentialFactory(type: JavaExec, dependsOn:[classes]) {
		main = 'cavani.endorfina.authority.tools.CredentialFactory'
		classpath = sourceSets.main.runtimeClasspath
	}
	
	task runServerCredential(type: JavaExec, dependsOn:[classes]) {
		main = 'cavani.endorfina.authority.tools.ServerCredential'
		classpath = sourceSets.main.runtimeClasspath
	}
	
	dependencies {
		compile dep_bcprov
		compile dep_bcpkix
	}
}

project(':authority.fakeldap') {
	apply plugin:'application'
	
	mainClassName = 'cavani.endorfina.authority.tools.FakeLdap38900'
	
	dependencies {
		compile 'org.apache.directory.server:apacheds-protocol-ldap:2.0.0-M11'
		compile 'org.apache.directory.server:apacheds-ldif-partition:2.0.0-M11'
		runtime 'org.apache.directory.api:api-ldap-codec-standalone:1.0.0-M16'
	}
}

project(':application.server') {
	apply plugin: 'war'
	apply plugin: 'eclipse-wtp'

	eclipse {
		wtp {
			facet {
				facet name: 'java', version: '1.7'
				facet name: 'jst.web', version: '3.0'
			}
		}
	}
	
	dependencies {
		providedCompile dep_servlet_api
	}
}

project(':application.client') {
	apply plugin:'application'
	
	mainClassName = 'cavani.endorfina.app.Main'
	
	dependencies {
		compile dep_bcprov
	}
}

task deploy {
	def deployment = [
		'authority.api',
		'authority.core',
		'authority.service',
		'authority.adapter',
		'application.server',
		'bcprov-jdk15on-1.48.jar',
		'bcpkix-jdk15on-1.48.jar',
	]

	File deploy = mkdir("deploy")
	def projects = subprojects.findAll { it.name in deployment }

	projects.each { project ->
		project.tasks.withType(Jar).each { art ->
			copy {
				from art.archivePath
				into deploy
			}
		}
		project.configurations.runtime.each { dep ->
			if (dep.name in deployment)
				copy {
					from dep
					into deploy
				}
		}
	}
}
